// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Serde = require("./Serde.bs.js");
var Types = require("./Types.bs.js");
var Future = require("reason-future/src/Future.bs.js");
var FutureJs = require("reason-future/src/FutureJs.bs.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

((require('isomorphic-fetch')));

function makeConfig(poolId, clientId, region, $staropt$star, param) {
  var authenticationFlowType = $staropt$star !== undefined ? $staropt$star : /* USER_SRP_AUTH */1;
  return /* record */[
          /* poolId */poolId,
          /* clientId */clientId,
          /* endpoint */"https://cognito-idp." + (Types.makeRegionString(region) + ".amazonaws.com/"),
          /* authenticationFlowType */authenticationFlowType
        ];
}

function request(config, operation, params) {
  var headers = { };
  var target = "AWSCognitoIdentityProviderService." + Types.makeOperationString(operation);
  headers["X-Amz-Target"] = target;
  headers["Content-Type"] = "application/x-amz-json-1.1";
  headers["X-Amz-User-Agent"] = "reason-cognito/0.1.x js";
  params["ClientId"] = config[/* clientId */1];
  return Future.flatMapOk(FutureJs.fromPromise(fetch(config[/* endpoint */2], Fetch.RequestInit.make(/* Post */2, Caml_option.some(headers), Caml_option.some(JSON.stringify(params)), undefined, undefined, /* NoCORS */2, undefined, /* NoCache */3, undefined, undefined, undefined)(/* () */0)), (function (fetchError) {
                    return /* `ReasonCognitoClientError */[
                            -291143216,
                            fetchError
                          ];
                  })), (function (apiResponse) {
                return Future.mapOk(FutureJs.fromPromise(apiResponse.json(), (function (err) {
                                  return /* `ReasonCognitoClientError */[
                                          -291143216,
                                          err
                                        ];
                                })), (function (json) {
                              var code = apiResponse.status;
                              var status = code < 200 ? /* Informational */Block.__(0, [code]) : (
                                  code >= 200 && code < 300 ? /* Success */Block.__(1, [code]) : (
                                      code >= 300 && code < 400 ? /* Redirect */Block.__(2, [code]) : (
                                          code >= 400 && code < 500 ? /* ClientError */Block.__(3, [code]) : /* ServerError */Block.__(4, [code])
                                        )
                                    )
                                );
                              return /* record */[
                                      /* status */status,
                                      /* json */json
                                    ];
                            }));
              }));
}

var Client = {
  request: request
};

function signUp(config, username, password, $staropt$star, $staropt$star$1, analyticsEndpointId, clientMetadata, secretHash, param) {
  var attributes = $staropt$star !== undefined ? $staropt$star : /* array */[];
  var validationData = $staropt$star$1 !== undefined ? $staropt$star$1 : /* array */[];
  var params = { };
  if (analyticsEndpointId !== undefined) {
    params["AnalyticsMetadata"] = Caml_option.valFromOption(analyticsEndpointId);
  }
  if (clientMetadata !== undefined) {
    params["ClientMetadata"] = Caml_option.valFromOption(clientMetadata);
  }
  params["Password"] = password;
  if (secretHash !== undefined) {
    params["SecretHash"] = secretHash;
  }
  params["UserAttributes"] = Serde.jsonMapString(attributes);
  params["Username"] = username;
  params["ValidationData"] = Serde.jsonMapString(validationData);
  return Future.flatMapOk(request(config, /* SignUp */0, params), (function (res) {
                var match = res[/* status */0];
                var tmp;
                if (match.tag === /* Success */1) {
                  var match$1 = Serde.makeSignupResponse(res[/* json */1]);
                  tmp = match$1 !== undefined ? /* Ok */Block.__(0, [match$1]) : /* Error */Block.__(1, [/* `ReasonCognitoSerdeError */[
                          521507828,
                          res[/* json */1]
                        ]]);
                } else {
                  tmp = /* Error */Block.__(1, [Serde.makeErrKind(res[/* json */1], Types.makeSignUpErrors)]);
                }
                return Future.value(tmp);
              }));
}

function confirmSignUp(config, username, confirmationCode, $staropt$star, secretHash, clientMetadata, analyticsEndpointId, param) {
  var forceAliasCreation = $staropt$star !== undefined ? $staropt$star : false;
  var params = { };
  if (analyticsEndpointId !== undefined) {
    params["AnalyticsMetadata"] = Caml_option.valFromOption(analyticsEndpointId);
  }
  if (clientMetadata !== undefined) {
    params["ClientMetadata"] = Caml_option.valFromOption(clientMetadata);
  }
  params["ConfirmationCode"] = confirmationCode;
  params["ForceAliasCreation"] = forceAliasCreation;
  if (secretHash !== undefined) {
    params["SecretHash"] = secretHash;
  }
  params["Username"] = username;
  return Future.flatMapOk(request(config, /* ConfirmSignUp */3, params), (function (res) {
                var match = res[/* status */0];
                var tmp;
                tmp = match.tag === /* Success */1 ? /* Ok */Block.__(0, [/* () */0]) : /* Error */Block.__(1, [Serde.makeErrKind(res[/* json */1], Types.makeConfirmSignUpErrors)]);
                return Future.value(tmp);
              }));
}

function initiateAuth(config, username, password, param) {
  var authParams = { };
  authParams["USERNAME"] = username;
  authParams["PASSWORD"] = password;
  var params = { };
  params["AuthParameters"] = authParams;
  params["AuthFlow"] = "USER_PASSWORD_AUTH";
  return Future.flatMapOk(request(config, /* InitiateAuth */8, params), (function (res) {
                var match = res[/* status */0];
                var tmp;
                if (match.tag === /* Success */1) {
                  console.log(res);
                  var authDecoder = res.AuthenticationResult;
                  var authenticationResult_000 = /* accessToken */authDecoder.AccessToken;
                  var authenticationResult_001 = /* expiresIn */authDecoder.ExpiresIn;
                  var authenticationResult_002 = /* idToken */authDecoder.IdToken;
                  var authenticationResult_003 = /* refreshToken */authDecoder.RefreshToken;
                  var authenticationResult_004 = /* tokenType */authDecoder.TokenType;
                  var authenticationResult = /* record */[
                    authenticationResult_000,
                    authenticationResult_001,
                    authenticationResult_002,
                    authenticationResult_003,
                    authenticationResult_004
                  ];
                  tmp = /* Ok */Block.__(0, [/* record */[
                        /* authenticationResult */authenticationResult,
                        /* challengeParameters */res.ChallengeParameters
                      ]]);
                } else {
                  tmp = /* Error */Block.__(1, [Belt_Option.mapWithDefault(Serde.parseCognitoError(res[/* json */1]), /* `CognitoUnknownError */[
                            -55570033,
                            "temp error"
                          ], (function (err) {
                              var match = err[/* __type */0];
                              switch (match) {
                                case "InvalidParameterException" :
                                    return /* `CognitoInvalidParameter */[
                                            -267133469,
                                            err[/* message */1]
                                          ];
                                case "NotAuthorizedException" :
                                    return /* `CognitoNotAuthorized */[
                                            -1019683139,
                                            err[/* message */1]
                                          ];
                                default:
                                  return /* `CognitoUnknownError */[
                                          -55570033,
                                          err[/* message */1]
                                        ];
                              }
                            }))]);
                }
                return Future.value(tmp);
              }));
}

exports.makeConfig = makeConfig;
exports.Client = Client;
exports.signUp = signUp;
exports.confirmSignUp = confirmSignUp;
exports.initiateAuth = initiateAuth;
/*  Not a pure module */
